#define WIDTH 13
#define CELL_BIT_WIDTH (3 * WIDTH)
#define ROW_MASK ((1 << WIDTH) - 1)
#define FIRST_TWO_ROWS_MASK ((ROW_MASK << 1) & (ROW_MASK << (WIDTH + 2))) 

#define PADDING_BIT_WIDTH 4

#define MODULUS_BIT_WIDTH 2
#define MODULUS 4
#define MODULUS_OFFSET (CELL_BIT_WIDTH + PADDING_BIT_WIDTH)
#define MODULUS_MASK (((1 << MODULUS_BIT_WIDTH) - 1) << MODULUS_OFFSET)

// Number if bits to represent 0 to WIDTH-1
#define FIRST_BLANK_BIT_WIDTH 4
#define FIRST_BLANK_OFFSET (CELL_BIT_WIDTH + PADDING_BIT_WIDTH + MODULUS_BIT_WIDTH)
#define FIRST_BLANK_MASK (((1 << FIRST_BLANK_BIT_WIDTH) - 1) << FIRST_BLANK_OFFSET)

#define TOTAL_BIT_WIDTH (CELL_BIT_WIDTH + MODULUS_BIT_WIDTH + FIRST_BLANK_BIT_WIDTH + PADDING_BIT_WIDTH)
#define DATA_BIT_WIDTH (CELL_BIT_WIDTH + MODULUS_BIT_WIDTH)
